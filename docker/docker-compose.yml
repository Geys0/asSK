version: '3.8'

services:
  # SQL Server Database
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: assk_sqlserver
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=YourStrong@Passw0rd
      - MSSQL_PID=Developer
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - assk_network
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P YourStrong@Passw0rd -Q 'SELECT 1'"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: assk_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - assk_network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # .NET Backend API
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: assk_backend
    ports:
      - "5000:5000"
      - "5001:5001"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=asSK;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=true;
      - ConnectionStrings__Redis=redis:6379
      - JWT__SecretKey=your-super-secret-jwt-key-here-make-it-long-and-secure
      - JWT__Issuer=asSK-Connect
      - JWT__Audience=asSK-Connect-Users
      - JWT__ExpirationHours=24
      - Azure__StorageConnectionString=UseDevelopmentStorage=true
      - Stripe__SecretKey=sk_test_your_stripe_secret_key
      - Stripe__PublishableKey=pk_test_your_stripe_publishable_key
    depends_on:
      sqlserver:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - assk_network
    volumes:
      - ../backend:/app
      - /app/bin
      - /app/obj
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Azure Storage Emulator (for file uploads)
  azurite:
    image: mcr.microsoft.com/azure-storage/azurite
    container_name: assk_azurite
    ports:
      - "10000:10000"
      - "10001:10001"
      - "10002:10002"
    volumes:
      - azurite_data:/data
    networks:
      - assk_network
    command: azurite --blobHost 0.0.0.0 --queueHost 0.0.0.0 --tableHost 0.0.0.0

  # Elasticsearch (for search functionality)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: assk_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - assk_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kibana (for Elasticsearch management)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: assk_kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - assk_network

volumes:
  sqlserver_data:
  redis_data:
  azurite_data:
  elasticsearch_data:

networks:
  assk_network:
    driver: bridge
